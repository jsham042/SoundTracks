{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _wrapAsyncGenerator from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncIterator from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncIterator\";\nimport _asyncGeneratorDelegate from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncGeneratorDelegate\";\nimport { statSync, createReadStream, promises as fs } from 'node:fs';\nimport { basename } from 'node:path';\nimport DOMException from 'node-domexception';\nimport File from './file.js';\nimport Blob from './index.js';\nvar stat = fs.stat;\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\n\nvar blobFromSync = function blobFromSync(path, type) {\n  return fromBlob(statSync(path), path, type);\n};\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\n\n\nvar blobFrom = function blobFrom(path, type) {\n  return stat(path).then(function (stat) {\n    return fromBlob(stat, path, type);\n  });\n};\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\n\n\nvar fileFrom = function fileFrom(path, type) {\n  return stat(path).then(function (stat) {\n    return fromFile(stat, path, type);\n  });\n};\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\n\n\nvar fileFromSync = function fileFromSync(path, type) {\n  return fromFile(statSync(path), path, type);\n}; // @ts-ignore\n\n\nvar fromBlob = function fromBlob(stat, path) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return new Blob([new BlobDataItem({\n    path: path,\n    size: stat.size,\n    lastModified: stat.mtimeMs,\n    start: 0\n  })], {\n    type: type\n  });\n}; // @ts-ignore\n\n\nvar fromFile = function fromFile(stat, path) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return new File([new BlobDataItem({\n    path: path,\n    size: stat.size,\n    lastModified: stat.mtimeMs,\n    start: 0\n  })], basename(path), {\n    type: type,\n    lastModified: stat.mtimeMs\n  });\n};\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\n\n\nvar BlobDataItem =\n/*#__PURE__*/\nfunction () {\n  function BlobDataItem(options) {\n    _classCallCheck(this, BlobDataItem);\n\n    this.path = options.path;\n    this.start = options.start;\n    this.size = options.size;\n    this.lastModified = options.lastModified;\n  }\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n\n\n  _createClass(BlobDataItem, [{\n    key: \"slice\",\n    value: function slice(start, end) {\n      return new BlobDataItem({\n        path: this.path,\n        lastModified: this.lastModified,\n        size: end - start,\n        start: this.start + start\n      });\n    }\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var _this = this;\n\n      return _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _ref, mtimeMs;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _awaitAsyncGenerator(stat(_this.path));\n\n              case 2:\n                _ref = _context.sent;\n                mtimeMs = _ref.mtimeMs;\n\n                if (!(mtimeMs > _this.lastModified)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError');\n\n              case 6:\n                return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(createReadStream(_this.path, {\n                  start: _this.start,\n                  end: _this.start + _this.size - 1\n                })), _awaitAsyncGenerator), \"t0\", 7);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'Blob';\n    }\n  }]);\n\n  return BlobDataItem;\n}();\n\nexport default blobFromSync;\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync };","map":null,"metadata":{},"sourceType":"module"}