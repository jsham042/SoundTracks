{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\n\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\nimport { types } from 'node:util';\nimport http from 'node:http';\n/* c8 ignore next 9 */\n\nvar validateHeaderName = typeof http.validateHeaderName === 'function' ? http.validateHeaderName : function (name) {\n  if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n    var error = new TypeError(\"Header name must be a valid HTTP token [\".concat(name, \"]\"));\n    Object.defineProperty(error, 'code', {\n      value: 'ERR_INVALID_HTTP_TOKEN'\n    });\n    throw error;\n  }\n};\n/* c8 ignore next 9 */\n\nvar validateHeaderValue = typeof http.validateHeaderValue === 'function' ? http.validateHeaderValue : function (name, value) {\n  if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n    var error = new TypeError(\"Invalid character in header content [\\\"\".concat(name, \"\\\"]\"));\n    Object.defineProperty(error, 'code', {\n      value: 'ERR_INVALID_CHAR'\n    });\n    throw error;\n  }\n};\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\n\nvar Headers =\n/*#__PURE__*/\nfunction (_URLSearchParams) {\n  _inherits(Headers, _URLSearchParams);\n\n  /**\n   * Headers class\n   *\n   * @constructor\n   * @param {HeadersInit} [init] - Response headers\n   */\n  function Headers(init) {\n    var _this;\n\n    _classCallCheck(this, Headers);\n\n    // Validate and normalize init object in [name, value(s)][]\n\n    /** @type {string[][]} */\n    var result = [];\n\n    if (init instanceof Headers) {\n      var raw = init.raw();\n\n      var _loop = function _loop() {\n        var _result;\n\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            values = _Object$entries$_i[1];\n\n        (_result = result).push.apply(_result, _toConsumableArray(values.map(function (value) {\n          return [name, value];\n        })));\n      };\n\n      for (var _i = 0, _Object$entries = Object.entries(raw); _i < _Object$entries.length; _i++) {\n        _loop();\n      }\n    } else if (init == null) {// eslint-disable-line no-eq-null, eqeqeq\n      // No op\n    } else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n      var method = init[Symbol.iterator]; // eslint-disable-next-line no-eq-null, eqeqeq\n\n      if (method == null) {\n        var _result2;\n\n        // Record<ByteString, ByteString>\n        (_result2 = result).push.apply(_result2, _toConsumableArray(Object.entries(init)));\n      } else {\n        if (typeof method !== 'function') {\n          throw new TypeError('Header pairs must be iterable');\n        } // Sequence<sequence<ByteString>>\n        // Note: per spec we have to first exhaust the lists then process them\n\n\n        result = _toConsumableArray(init).map(function (pair) {\n          if (typeof pair !== 'object' || types.isBoxedPrimitive(pair)) {\n            throw new TypeError('Each header pair must be an iterable object');\n          }\n\n          return _toConsumableArray(pair);\n        }).map(function (pair) {\n          if (pair.length !== 2) {\n            throw new TypeError('Each header pair must be a name/value tuple');\n          }\n\n          return _toConsumableArray(pair);\n        });\n      }\n    } else {\n      throw new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n    } // Validate and lowercase\n\n\n    result = result.length > 0 ? result.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          value = _ref2[1];\n\n      validateHeaderName(name);\n      validateHeaderValue(name, String(value));\n      return [String(name).toLowerCase(), String(value)];\n    }) : undefined;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Headers).call(this, result)); // Returning a Proxy that will lowercase key names, validate parameters and sort keys\n    // eslint-disable-next-line no-constructor-return\n\n    return _possibleConstructorReturn(_this, new Proxy(_assertThisInitialized(_this), {\n      get: function get(target, p, receiver) {\n        switch (p) {\n          case 'append':\n          case 'set':\n            return function (name, value) {\n              validateHeaderName(name);\n              validateHeaderValue(name, String(value));\n              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));\n            };\n\n          case 'delete':\n          case 'has':\n          case 'getAll':\n            return function (name) {\n              validateHeaderName(name);\n              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n            };\n\n          case 'keys':\n            return function () {\n              target.sort();\n              return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n            };\n\n          default:\n            return Reflect.get(target, p, receiver);\n        }\n      }\n    }));\n    /* c8 ignore next */\n  }\n\n  _createClass(Headers, [{\n    key: \"toString\",\n    value: function toString() {\n      return Object.prototype.toString.call(this);\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var values = this.getAll(name);\n\n      if (values.length === 0) {\n        return null;\n      }\n\n      var value = values.join(', ');\n\n      if (/^content-encoding$/i.test(name)) {\n        value = value.toLowerCase();\n      }\n\n      return value;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var name = _step.value;\n          Reflect.apply(callback, thisArg, [this.get(name), name, this]);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"values\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function values() {\n      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, name;\n\n      return _regeneratorRuntime.wrap(function values$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _iteratorError2 = undefined;\n              _context.prev = 3;\n              _iterator2 = this.keys()[Symbol.iterator]();\n\n            case 5:\n              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                _context.next = 12;\n                break;\n              }\n\n              name = _step2.value;\n              _context.next = 9;\n              return this.get(name);\n\n            case 9:\n              _iteratorNormalCompletion2 = true;\n              _context.next = 5;\n              break;\n\n            case 12:\n              _context.next = 18;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t0;\n\n            case 18:\n              _context.prev = 18;\n              _context.prev = 19;\n\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n\n            case 21:\n              _context.prev = 21;\n\n              if (!_didIteratorError2) {\n                _context.next = 24;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 24:\n              return _context.finish(21);\n\n            case 25:\n              return _context.finish(18);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n    })\n    /**\n     * @type {() => IterableIterator<[string, string]>}\n     */\n\n  }, {\n    key: \"entries\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function entries() {\n      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, name;\n\n      return _regeneratorRuntime.wrap(function entries$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iteratorNormalCompletion3 = true;\n              _didIteratorError3 = false;\n              _iteratorError3 = undefined;\n              _context2.prev = 3;\n              _iterator3 = this.keys()[Symbol.iterator]();\n\n            case 5:\n              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                _context2.next = 12;\n                break;\n              }\n\n              name = _step3.value;\n              _context2.next = 9;\n              return [name, this.get(name)];\n\n            case 9:\n              _iteratorNormalCompletion3 = true;\n              _context2.next = 5;\n              break;\n\n            case 12:\n              _context2.next = 18;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](3);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context2.t0;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.prev = 19;\n\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n\n            case 21:\n              _context2.prev = 21;\n\n              if (!_didIteratorError3) {\n                _context2.next = 24;\n                break;\n              }\n\n              throw _iteratorError3;\n\n            case 24:\n              return _context2.finish(21);\n\n            case 25:\n              return _context2.finish(18);\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, entries, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n    })\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this.entries();\n    }\n    /**\n     * Node-fetch non-spec method\n     * returning all headers and their values as array\n     * @returns {Record<string, string[]>}\n     */\n\n  }, {\n    key: \"raw\",\n    value: function raw() {\n      var _this2 = this;\n\n      return _toConsumableArray(this.keys()).reduce(function (result, key) {\n        result[key] = _this2.getAll(key);\n        return result;\n      }, {});\n    }\n    /**\n     * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n     */\n\n  }, {\n    key: Symbol.for('nodejs.util.inspect.custom'),\n    value: function value() {\n      var _this3 = this;\n\n      return _toConsumableArray(this.keys()).reduce(function (result, key) {\n        var values = _this3.getAll(key); // Http.request() only supports string as Host header.\n        // This hack makes specifying custom Host header possible.\n\n\n        if (key === 'host') {\n          result[key] = values[0];\n        } else {\n          result[key] = values.length > 1 ? values : values[0];\n        }\n\n        return result;\n      }, {});\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return this.constructor.name;\n    }\n  }]);\n\n  return Headers;\n}(_wrapNativeSuper(URLSearchParams));\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\n\n\nexport { Headers as default };\nObject.defineProperties(Headers.prototype, ['get', 'entries', 'forEach', 'values'].reduce(function (result, property) {\n  result[property] = {\n    enumerable: true\n  };\n  return result;\n}, {}));\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\n\nexport function fromRawHeaders() {\n  var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return new Headers(headers // Split into pairs\n  .reduce(function (result, value, index, array) {\n    if (index % 2 === 0) {\n      result.push(array.slice(index, index + 2));\n    }\n\n    return result;\n  }, []).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        name = _ref4[0],\n        value = _ref4[1];\n\n    try {\n      validateHeaderName(name);\n      validateHeaderValue(name, String(value));\n      return true;\n    } catch (_unused) {\n      return false;\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}