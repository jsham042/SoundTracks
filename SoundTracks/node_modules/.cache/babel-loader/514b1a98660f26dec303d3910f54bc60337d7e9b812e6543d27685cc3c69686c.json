{"ast":null,"code":"// import fetch from \"node-fetch\";\n\n// Information to reach API\nvar API_URL = \"https://api.openai.com/v1/engines/text-davinci-003/completions\";\nvar api_key = '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';\n\n//Asynchronous functions\nexport var generateText = function generateText(prompt) {\n  return new Promise(function (resolve, reject) {\n    var data = JSON.stringify({\n      prompt: prompt,\n      temperature: 0.5,\n      max_tokens: 500,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0\n    });\n    fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \".concat(api_key)\n      },\n      body: data\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Request failed!');\n    }, function (networkError) {\n      console.log(networkError.message);\n    }).then(function (jsonResponse) {\n      var responseArray = jsonResponse.choices[0].text.split(/\\d+\\.\\s/g);\n      var filteredResponse = responseArray.map(function (element) {\n        return element.replace(/\\n|\\d+\\./g, \"\").trim();\n      }).filter(function (element) {\n        return element !== \"\";\n      });\n      resolve(filteredResponse);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n};\n\n// Usage example:\ngenerateText(\"Give me 20 song recommendations for this prompt: driving down the 101 with the top down. Format the response with this convention Song Name - Artist Name 2. Song Name - Artist Name`\").then(function (response) {\n  console.log(response);\n}).catch(function (error) {\n  console.error(error);\n});\nexport default {\n  generateText: generateText\n};","map":{"version":3,"names":["API_URL","api_key","generateText","prompt","Promise","resolve","reject","data","JSON","stringify","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","fetch","method","headers","concat","body","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","responseArray","choices","text","split","filteredResponse","map","element","replace","trim","filter","catch","error"],"sources":["C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/src/util/OpenAiAPIRequest.js"],"sourcesContent":["// import fetch from \"node-fetch\";\r\n\r\n// Information to reach API\r\nconst API_URL = \"https://api.openai.com/v1/engines/text-davinci-003/completions\";\r\nconst api_key = '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';\r\n\r\n//Asynchronous functions\r\nexport const generateText = (prompt) => {\r\n  return new Promise((resolve, reject) => {\r\n    const data = JSON.stringify({\r\n      prompt: prompt,\r\n      temperature: 0.5,\r\n      max_tokens: 500,\r\n      top_p: 1,\r\n      frequency_penalty: 0,\r\n      presence_penalty: 0\r\n    });\r\n\r\n    fetch(API_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${api_key}`,\r\n      },\r\n      body: data,\r\n\r\n\r\n    }).then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error('Request failed!');\r\n    }, networkError => {\r\n      console.log(networkError.message);\r\n    }).then(jsonResponse => {\r\n      const responseArray = jsonResponse.choices[0].text.split(/\\d+\\.\\s/g);\r\n      const filteredResponse = responseArray.map((element) => {\r\n        return element.replace(/\\n|\\d+\\./g, \"\").trim();\r\n      }).filter((element) => element !== \"\");\r\n      resolve(filteredResponse);\r\n    }).catch(error => {\r\n      reject(error);\r\n    });\r\n  });\r\n}\r\n\r\n\r\n// Usage example:\r\ngenerateText(\"Give me 20 song recommendations for this prompt: driving down the 101 with the top down. Format the response with this convention Song Name - Artist Name 2. Song Name - Artist Name`\").then((response) => {\r\n  console.log(response);\r\n}).catch((error) => {\r\n  console.error(error);\r\n});\r\n\r\nexport default {generateText};\r\n"],"mappings":"AAAA;;AAEA;AACA,IAAMA,OAAO,GAAG,gEAAgE;AAChF,IAAMC,OAAO,GAAG,qDAAqD;;AAErE;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,MAAM,EAAK;EACtC,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACtC,IAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAC1BN,MAAM,EAAEA,MAAM;MACdO,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE,GAAG;MACfC,KAAK,EAAE,CAAC;MACRC,iBAAiB,EAAE,CAAC;MACpBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;IAEFC,KAAK,CAACf,OAAO,EAAE;MACbgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,YAAAC,MAAA,CAAYjB,OAAO;MACpC,CAAC;MACDkB,IAAI,EAAEZ;IAGR,CAAC,CAAC,CAACa,IAAI,CAAC,UAAAC,QAAQ,EAAI;MAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf,OAAOD,QAAQ,CAACE,IAAI,EAAE;MACxB;MACA,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IACpC,CAAC,EAAE,UAAAC,YAAY,EAAI;MACjBC,OAAO,CAACC,GAAG,CAACF,YAAY,CAACG,OAAO,CAAC;IACnC,CAAC,CAAC,CAACR,IAAI,CAAC,UAAAS,YAAY,EAAI;MACtB,IAAMC,aAAa,GAAGD,YAAY,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,KAAK,CAAC,UAAU,CAAC;MACpE,IAAMC,gBAAgB,GAAGJ,aAAa,CAACK,GAAG,CAAC,UAACC,OAAO,EAAK;QACtD,OAAOA,OAAO,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACC,IAAI,EAAE;MAChD,CAAC,CAAC,CAACC,MAAM,CAAC,UAACH,OAAO;QAAA,OAAKA,OAAO,KAAK,EAAE;MAAA,EAAC;MACtC/B,OAAO,CAAC6B,gBAAgB,CAAC;IAC3B,CAAC,CAAC,CAACM,KAAK,CAAC,UAAAC,KAAK,EAAI;MAChBnC,MAAM,CAACmC,KAAK,CAAC;IACf,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;;AAGD;AACAvC,YAAY,CAAC,uLAAuL,CAAC,CAACkB,IAAI,CAAC,UAACC,QAAQ,EAAK;EACvNK,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;AACvB,CAAC,CAAC,CAACmB,KAAK,CAAC,UAACC,KAAK,EAAK;EAClBf,OAAO,CAACe,KAAK,CAACA,KAAK,CAAC;AACtB,CAAC,CAAC;AAEF,eAAe;EAACvC,YAAY,EAAZA;AAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}