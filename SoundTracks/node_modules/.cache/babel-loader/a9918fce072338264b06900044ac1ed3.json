{"ast":null,"code":"// Information to reach API\nvar API_URL = \"https://api.openai.com/v1/engines/text-davinci-003/completions\";\nvar api_key = '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'; //Asynchronous functions\n\nexport var generateText = function generateText(prompt) {\n  return new Promise(function (resolve, reject) {\n    var data = JSON.stringify({\n      prompt: prompt,\n      temperature: 0.5,\n      max_tokens: 500,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0\n    });\n    fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \".concat(api_key)\n      },\n      body: data\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error('Request failed!');\n    }, function (networkError) {\n      console.log(networkError.message);\n    }).then(function (jsonResponse) {\n      var responseArray = jsonResponse.choices[0].text.split(/\\d+\\.\\s/g);\n      var filteredResponse = responseArray.map(function (element) {\n        return element.replace(/\\n|\\d+\\./g, \"\").trim();\n      }).filter(function (element) {\n        return element !== \"\";\n      });\n      resolve(filteredResponse);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}; // Usage example:\n\ngenerateText(\"Give me 20 song recommendations for this prompt: driving down the 101 with the top down. Format the response with this convention Song Name - Artist Name 2. Song Name - Artist Name`\").then(function (response) {\n  console.log(response);\n}).catch(function (error) {\n  console.error(error);\n});\nexport default {\n  generateText: generateText\n};","map":{"version":3,"sources":["C:\\Users\\joesh\\OneDrive\\Desktop\\jammming-project-solution\\jammming-project-solution\\src\\util\\OpenAiAPIRequest.js"],"names":["API_URL","api_key","generateText","prompt","Promise","resolve","reject","data","JSON","stringify","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","fetch","method","headers","body","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","responseArray","choices","text","split","filteredResponse","map","element","replace","trim","filter","catch","error"],"mappings":"AAEA;AACA,IAAMA,OAAO,GAAG,gEAAhB;AACA,IAAMC,OAAO,GAAG,qDAAhB,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AACtC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BN,MAAAA,MAAM,EAAEA,MADkB;AAE1BO,MAAAA,WAAW,EAAE,GAFa;AAG1BC,MAAAA,UAAU,EAAE,GAHc;AAI1BC,MAAAA,KAAK,EAAE,CAJmB;AAK1BC,MAAAA,iBAAiB,EAAE,CALO;AAM1BC,MAAAA,gBAAgB,EAAE;AANQ,KAAf,CAAb;AASAC,IAAAA,KAAK,CAACf,OAAD,EAAU;AACbgB,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,0CAA2BhB,OAA3B;AAFO,OAFI;AAMbiB,MAAAA,IAAI,EAAEX;AANO,KAAV,CAAL,CASGY,IATH,CASQ,UAAAC,QAAQ,EAAI;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD,KAdD,EAcG,UAAAC,YAAY,EAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,OAAzB;AACD,KAhBD,EAgBGR,IAhBH,CAgBQ,UAAAS,YAAY,EAAI;AACtB,UAAMC,aAAa,GAAGD,YAAY,CAACE,OAAb,CAAqB,CAArB,EAAwBC,IAAxB,CAA6BC,KAA7B,CAAmC,UAAnC,CAAtB;AACA,UAAMC,gBAAgB,GAAGJ,aAAa,CAACK,GAAd,CAAkB,UAACC,OAAD,EAAa;AACtD,eAAOA,OAAO,CAACC,OAAR,CAAgB,WAAhB,EAA6B,EAA7B,EAAiCC,IAAjC,EAAP;AACD,OAFwB,EAEtBC,MAFsB,CAEf,UAACH,OAAD;AAAA,eAAaA,OAAO,KAAK,EAAzB;AAAA,OAFe,CAAzB;AAGA9B,MAAAA,OAAO,CAAC4B,gBAAD,CAAP;AACD,KAtBD,EAsBGM,KAtBH,CAsBS,UAAAC,KAAK,EAAI;AAChBlC,MAAAA,MAAM,CAACkC,KAAD,CAAN;AACD,KAxBD;AAyBD,GAnCM,CAAP;AAoCD,CArCM,C,CAwCP;;AACAtC,YAAY,CAAC,uLAAD,CAAZ,CAAsMiB,IAAtM,CAA2M,UAACC,QAAD,EAAc;AACvNK,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACD,CAFD,EAEGmB,KAFH,CAES,UAACC,KAAD,EAAW;AAClBf,EAAAA,OAAO,CAACe,KAAR,CAAcA,KAAd;AACD,CAJD;AAMA,eAAe;AAACtC,EAAAA,YAAY,EAAZA;AAAD,CAAf","sourcesContent":["\r\n\r\n// Information to reach API\r\nconst API_URL = \"https://api.openai.com/v1/engines/text-davinci-003/completions\";\r\nconst api_key = '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';\r\n\r\n//Asynchronous functions\r\nexport const generateText = (prompt) => {\r\n  return new Promise((resolve, reject) => {\r\n    const data = JSON.stringify({\r\n      prompt: prompt,\r\n      temperature: 0.5,\r\n      max_tokens: 500,\r\n      top_p: 1,\r\n      frequency_penalty: 0,\r\n      presence_penalty: 0\r\n    });\r\n\r\n    fetch(API_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${api_key}`,\r\n      },\r\n      body: data,\r\n\r\n\r\n    }).then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error('Request failed!');\r\n    }, networkError => {\r\n      console.log(networkError.message);\r\n    }).then(jsonResponse => {\r\n      const responseArray = jsonResponse.choices[0].text.split(/\\d+\\.\\s/g);\r\n      const filteredResponse = responseArray.map((element) => {\r\n        return element.replace(/\\n|\\d+\\./g, \"\").trim();\r\n      }).filter((element) => element !== \"\");\r\n      resolve(filteredResponse);\r\n    }).catch(error => {\r\n      reject(error);\r\n    });\r\n  });\r\n}\r\n\r\n\r\n// Usage example:\r\ngenerateText(\"Give me 20 song recommendations for this prompt: driving down the 101 with the top down. Format the response with this convention Song Name - Artist Name 2. Song Name - Artist Name`\").then((response) => {\r\n  console.log(response);\r\n}).catch((error) => {\r\n  console.error(error);\r\n});\r\n\r\nexport default {generateText};\r\n"]},"metadata":{},"sourceType":"module"}