{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/joesh/OneDrive/Desktop/SoundTracks/SoundTracks/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/joesh/OneDrive/Desktop/SoundTracks/SoundTracks/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";// Information to reach API\nvar API_URL=\"https://api.openai.com/v1/engines/text-davinci-003/completions\";var api_key='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';var API_URL_IMAGE=\"https://api.openai.com/v1/images/generations\";//Asynchronous functions\nexport var generateSongRecommendations=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(prompt){var data,response,jsonResponse,responseArray,filteredResponse;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:data=JSON.stringify({prompt:prompt,temperature:0.5,max_tokens:500,top_p:1,frequency_penalty:0,presence_penalty:0});_context.prev=1;_context.next=4;return fetch(API_URL,{method:\"POST\",body:data,headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(api_key)}});case 4:response=_context.sent;if(!response.ok){_context.next=12;break;}_context.next=8;return response.json();case 8:jsonResponse=_context.sent;responseArray=jsonResponse.choices[0].text.split(/\\d+\\.\\s/g);filteredResponse=responseArray.map(function(element){return element.replace(/\\n|\\d+\\./g,\"\").trim();}).filter(function(element){return element!==\"\";});return _context.abrupt(\"return\",filteredResponse);case 12:_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](1);console.log(_context.t0);case 17:case\"end\":return _context.stop();}},_callee,null,[[1,14]]);}));return function generateSongRecommendations(_x){return _ref.apply(this,arguments);};}();export var generatePlaylistName=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(prompt){var data,response,jsonResponse,textResponse;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:data=JSON.stringify({prompt:prompt,temperature:0.5,max_tokens:500,top_p:1,frequency_penalty:0,presence_penalty:0});_context2.prev=1;_context2.next=4;return fetch(API_URL,{method:\"POST\",body:data,headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(api_key)}});case 4:response=_context2.sent;if(!response.ok){_context2.next=11;break;}_context2.next=8;return response.json();case 8:jsonResponse=_context2.sent;textResponse=jsonResponse.choices[0].text;return _context2.abrupt(\"return\",textResponse);case 11:_context2.next=16;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);case 16:case\"end\":return _context2.stop();}},_callee2,null,[[1,13]]);}));return function generatePlaylistName(_x2){return _ref2.apply(this,arguments);};}();export var generateImage=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(prompt){var data,response,jsonResponse;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:data=JSON.stringify({\"model\":\"image-alpha-001\",\"prompt\":prompt,\"num_images\":1,\"size\":\"512x512\"});_context3.prev=1;_context3.next=4;return fetch(API_URL_IMAGE,{method:\"POST\",body:data,headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(api_key)}});case 4:response=_context3.sent;if(!response.ok){_context3.next=17;break;}_context3.next=8;return response.json();case 8:jsonResponse=_context3.sent;if(!(jsonResponse&&jsonResponse.data&&jsonResponse.data.length>0)){_context3.next=13;break;}return _context3.abrupt(\"return\",jsonResponse.data[0].url);case 13:console.error(\"Invalid response from OpenAI API\");return _context3.abrupt(\"return\",null);case 15:_context3.next=19;break;case 17:console.error(\"Failed to generate image: \".concat(response.status));return _context3.abrupt(\"return\",null);case 19:_context3.next=25;break;case 21:_context3.prev=21;_context3.t0=_context3[\"catch\"](1);console.error(\"Error generating image: \".concat(_context3.t0));return _context3.abrupt(\"return\",null);case 25:case\"end\":return _context3.stop();}},_callee3,null,[[1,21]]);}));return function generateImage(_x3){return _ref3.apply(this,arguments);};}();generateImage(\"Image of driving down the 101. Not containing text.\").then(function(albumArtUrl){console.log(albumArtUrl);// the URL of the generated album art\n// you can now set the state of the album art URL to `albumArtUrl`\n}).catch(function(error){console.error(error);});export default{generateSongRecommendations:generateSongRecommendations,generatePlaylistName:generatePlaylistName,generateImage:generateImage};","map":{"version":3,"names":["API_URL","api_key","API_URL_IMAGE","generateSongRecommendations","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","prompt","data","response","jsonResponse","responseArray","filteredResponse","wrap","_callee$","_context","prev","next","JSON","stringify","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","fetch","method","body","headers","concat","sent","ok","json","choices","text","split","map","element","replace","trim","filter","abrupt","t0","console","log","stop","_x","apply","arguments","generatePlaylistName","_ref2","_callee2","textResponse","_callee2$","_context2","_x2","generateImage","_ref3","_callee3","_callee3$","_context3","length","url","error","status","_x3","then","albumArtUrl","catch"],"sources":["C:/Users/joesh/OneDrive/Desktop/SoundTracks/SoundTracks/src/util/OpenAiAPIRequest.js"],"sourcesContent":["// Information to reach API\r\nconst API_URL = \"https://api.openai.com/v1/engines/text-davinci-003/completions\";\r\nconst api_key = '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';\r\nconst API_URL_IMAGE = \"https://api.openai.com/v1/images/generations\";\r\n\r\n//Asynchronous functions\r\nexport const generateSongRecommendations = async(prompt) => {\r\n    const data = JSON.stringify({\r\n      prompt: prompt,\r\n      temperature: 0.5,\r\n      max_tokens: 500,\r\n      top_p: 1,\r\n      frequency_penalty: 0,\r\n      presence_penalty: 0\r\n    });\r\n\r\n    try {\r\n        const response = await fetch(API_URL, {\r\n            method: \"POST\",\r\n            body: data,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${api_key}`\r\n            }\r\n            });\r\n            if(response.ok){\r\n            const jsonResponse = await response.json();\r\n            const responseArray = jsonResponse.choices[0].text.split(/\\d+\\.\\s/g);\r\n            const filteredResponse = responseArray.map((element) => {\r\n                return element.replace(/\\n|\\d+\\./g, \"\").trim();\r\n            }).filter((element) => element !== \"\");\r\n            return(filteredResponse);\r\n        }\r\n    } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\nexport const generatePlaylistName = async(prompt) => {\r\n    const data = JSON.stringify({\r\n        prompt: prompt,\r\n        temperature: 0.5,\r\n        max_tokens: 500,\r\n        top_p: 1,\r\n        frequency_penalty: 0,\r\n        presence_penalty: 0\r\n    });\r\n\r\n    try {\r\n        const response = await fetch(API_URL, {\r\n            method: \"POST\",\r\n            body: data,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${api_key}`\r\n            }\r\n        });\r\n        if(response.ok){\r\n            const jsonResponse = await response.json();\r\n            const textResponse = jsonResponse.choices[0].text\r\n            return(textResponse);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const generateImage = async (prompt) => {\r\n    const data = JSON.stringify({\r\n        \"model\": \"image-alpha-001\",\r\n        \"prompt\": prompt,\r\n        \"num_images\": 1,\r\n        \"size\": \"512x512\",\r\n    });\r\n\r\n    try {\r\n        const response = await fetch(API_URL_IMAGE, {\r\n            method: \"POST\",\r\n            body: data,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${api_key}`\r\n            }\r\n        });\r\n        if (response.ok) {\r\n            const jsonResponse = await response.json();\r\n            if (jsonResponse && jsonResponse.data && jsonResponse.data.length > 0) {\r\n                return jsonResponse.data[0].url;\r\n            } else {\r\n                console.error(\"Invalid response from OpenAI API\");\r\n                return null;\r\n            }\r\n        } else {\r\n            console.error(`Failed to generate image: ${response.status}`);\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error generating image: ${error}`);\r\n        return null;\r\n    }\r\n}\r\n\r\n    generateImage(`Image of driving down the 101. Not containing text.`)\r\n    .then(albumArtUrl => {\r\n        console.log(albumArtUrl); // the URL of the generated album art\r\n        // you can now set the state of the album art URL to `albumArtUrl`\r\n    })\r\n    .catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n\r\nexport default {generateSongRecommendations, generatePlaylistName, generateImage};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}