{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\joesh\\\\OneDrive\\\\Desktop\\\\jammming-project-solution\\\\jammming-project-solution\\\\src\\\\components\\\\App\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify.js';\nimport { generateText } from '../../util/OpenAiAPIRequest.js';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n    _this.search = _this.search.bind(_assertThisInitialized(_this));\n    _this.openAiSearch = _this.openAiSearch.bind(_assertThisInitialized(_this));\n    _this.addTrack = _this.addTrack.bind(_assertThisInitialized(_this));\n    _this.removeTrack = _this.removeTrack.bind(_assertThisInitialized(_this));\n    _this.updatePlaylistName = _this.updatePlaylistName.bind(_assertThisInitialized(_this));\n    _this.savePlaylist = _this.savePlaylist.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"search\",\n    value: function search(term) {\n      var _this2 = this;\n\n      Spotify.search(term).then(function (searchResults) {\n        _this2.setState({\n          searchResults: searchResults\n        });\n      });\n    }\n  }, {\n    key: \"openAiSearch\",\n    value: function openAiSearch(term) {\n      var _this3 = this;\n\n      var songList = generateText(term);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var song = _step.value;\n          Spotify.openAiSearch(song).then(function (searchResults) {\n            _this3.setState({\n              searchResults: searchResults.push(song)\n            });\n          });\n        };\n\n        for (var _iterator = songList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addTrack\",\n    value: function addTrack(track) {\n      var tracks = this.state.playlistTracks;\n\n      if (tracks.find(function (savedTrack) {\n        return savedTrack.id === track.id;\n      })) {\n        return;\n      }\n\n      tracks.push(track);\n      this.setState({\n        playlistTracks: tracks\n      });\n    }\n  }, {\n    key: \"removeTrack\",\n    value: function removeTrack(track) {\n      var tracks = this.state.playlistTracks;\n      tracks = tracks.filter(function (currentTrack) {\n        return currentTrack.id !== track.id;\n      });\n      this.setState({\n        playlistTracks: tracks\n      });\n    }\n  }, {\n    key: \"updatePlaylistName\",\n    value: function updatePlaylistName(name) {\n      this.setState({\n        playlistName: name\n      });\n    }\n  }, {\n    key: \"savePlaylist\",\n    value: function savePlaylist() {\n      var _this4 = this;\n\n      var trackUris = this.state.playlistTracks.map(function (track) {\n        return track.uri;\n      });\n      Spotify.savePlaylist(this.state.playlistName, trackUris).then(function () {\n        _this4.setState({\n          playlistName: '[NAME PLAYLIST]',\n          playlistTracks: []\n        });\n      });\n    } // makeRecommendation(genre)\n    // {\n    //   Spotify.makeRecommendation(genre).then(searchResults => {\n    //     this.setState({searchResults: searchResults});\n    //   });\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"SOUND \", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"TRACK\")), React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        onSearch: this.openAiSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(SearchResults, {\n        searchResults: this.state.searchResults,\n        onAdd: this.addTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(Playlist, {\n        playlistName: this.state.playlistName,\n        playlistTracks: this.state.playlistTracks,\n        onNameChange: this.updatePlaylistName,\n        onRemove: this.removeTrack,\n        onSave: this.savePlaylist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\joesh\\OneDrive\\Desktop\\jammming-project-solution\\jammming-project-solution\\src\\components\\App\\App.js"],"names":["React","Playlist","SearchBar","SearchResults","Spotify","generateText","App","props","state","searchResults","playlistName","playlistTracks","search","bind","openAiSearch","addTrack","removeTrack","updatePlaylistName","savePlaylist","term","then","setState","songList","song","push","track","tracks","find","savedTrack","id","filter","currentTrack","name","trackUris","map","uri","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAAQC,YAAR,QAA2B,gCAA3B;;IAIMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,EADJ;AAEXC,MAAAA,YAAY,EAAE,cAFH;AAGXC,MAAAA,cAAc,EAAE;AAHL,KAAb;AAOA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,+BAAd;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,+BAApB;AACA,UAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcF,IAAd,+BAAhB;AACA,UAAKG,WAAL,GAAmB,MAAKA,WAAL,CAAiBH,IAAjB,+BAAnB;AACA,UAAKI,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBJ,IAAxB,+BAA1B;AACA,UAAKK,YAAL,GAAoB,MAAKA,YAAL,CAAkBL,IAAlB,+BAApB;AAfiB;AAiBlB;;;;2BAEMM,I,EAAM;AAAA;;AACXf,MAAAA,OAAO,CAACQ,MAAR,CAAeO,IAAf,EAAqBC,IAArB,CAA0B,UAAAX,aAAa,EAAI;AACzC,QAAA,MAAI,CAACY,QAAL,CAAc;AAACZ,UAAAA,aAAa,EAAEA;AAAhB,SAAd;AACD,OAFD;AAGD;;;iCAEYU,I,EAAK;AAAA;;AACd,UAAMG,QAAQ,GAAGjB,YAAY,CAACc,IAAD,CAA7B;AADc;AAAA;AAAA;;AAAA;AAAA;AAAA,cAEHI,IAFG;AAGZnB,UAAAA,OAAO,CAACU,YAAR,CAAqBS,IAArB,EAA2BH,IAA3B,CAAgC,UAAAX,aAAa,EAAI;AAC/C,YAAA,MAAI,CAACY,QAAL,CAAc;AAACZ,cAAAA,aAAa,EAAEA,aAAa,CAACe,IAAd,CAAmBD,IAAnB;AAAhB,aAAd;AACD,WAFD;AAHY;;AAEd,6BAAmBD,QAAnB,8HAA4B;AAAA;AAI3B;AANa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf;;;6BAGMG,K,EAAO;AACd,UAAIC,MAAM,GAAG,KAAKlB,KAAL,CAAWG,cAAxB;;AACA,UAAIe,MAAM,CAACC,IAAP,CAAY,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACC,EAAX,KAAkBJ,KAAK,CAACI,EAA5B;AAAA,OAAtB,CAAJ,EAA2D;AACzD;AACD;;AAEDH,MAAAA,MAAM,CAACF,IAAP,CAAYC,KAAZ;AACA,WAAKJ,QAAL,CAAc;AAACV,QAAAA,cAAc,EAAEe;AAAjB,OAAd;AACD;;;gCAEWD,K,EAAO;AACjB,UAAIC,MAAM,GAAG,KAAKlB,KAAL,CAAWG,cAAxB;AACAe,MAAAA,MAAM,GAAGA,MAAM,CAACI,MAAP,CAAc,UAAAC,YAAY;AAAA,eAAIA,YAAY,CAACF,EAAb,KAAoBJ,KAAK,CAACI,EAA9B;AAAA,OAA1B,CAAT;AAEA,WAAKR,QAAL,CAAc;AAACV,QAAAA,cAAc,EAAEe;AAAjB,OAAd;AACD;;;uCAEkBM,I,EAAM;AACvB,WAAKX,QAAL,CAAc;AAACX,QAAAA,YAAY,EAAEsB;AAAf,OAAd;AACD;;;mCAEc;AAAA;;AACb,UAAMC,SAAS,GAAG,KAAKzB,KAAL,CAAWG,cAAX,CAA0BuB,GAA1B,CAA8B,UAAAT,KAAK;AAAA,eAAIA,KAAK,CAACU,GAAV;AAAA,OAAnC,CAAlB;AACA/B,MAAAA,OAAO,CAACc,YAAR,CAAqB,KAAKV,KAAL,CAAWE,YAAhC,EAA8CuB,SAA9C,EAAyDb,IAAzD,CAA8D,YAAM;AAClE,QAAA,MAAI,CAACC,QAAL,CAAc;AACZX,UAAAA,YAAY,EAAE,iBADF;AAEZC,UAAAA,cAAc,EAAE;AAFJ,SAAd;AAID,OALD;AAMD,K,CAED;AACA;AACA;AACA;AACA;AAEA;;;;6BAGS;AACP,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAU;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAV,CADF,EAEE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAE,KAAKG,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AAAe,QAAA,aAAa,EAAE,KAAKN,KAAL,CAAWC,aAAzC;AACe,QAAA,KAAK,EAAE,KAAKM,QAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAGE,oBAAC,QAAD;AAAU,QAAA,YAAY,EAAE,KAAKP,KAAL,CAAWE,YAAnC;AACU,QAAA,cAAc,EAAE,KAAKF,KAAL,CAAWG,cADrC;AAEU,QAAA,YAAY,EAAE,KAAKM,kBAF7B;AAGU,QAAA,QAAQ,EAAE,KAAKD,WAHzB;AAIU,QAAA,MAAM,EAAE,KAAKE,YAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CAFF,CAFF,CADJ;AAiBD;;;;EA/FelB,KAAK,CAACoC,S;;AAmGxB,eAAe9B,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify.js';\nimport {generateText} from '../../util/OpenAiAPIRequest.js';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: [],\n\n    };\n\n    this.search = this.search.bind(this);\n    this.openAiSearch = this.openAiSearch.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  openAiSearch(term){\n      const songList = generateText(term);\n      for (const song of songList){\n        Spotify.openAiSearch(song).then(searchResults => {\n          this.setState({searchResults: searchResults.push(song)});\n        });\n      }\n\n    }\n\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: '[NAME PLAYLIST]',\n        playlistTracks: []\n      });\n    });\n  }\n\n  // makeRecommendation(genre)\n  // {\n  //   Spotify.makeRecommendation(genre).then(searchResults => {\n  //     this.setState({searchResults: searchResults});\n  //   });\n\n  // }\n\n\n  render() {\n    return (\n        <div>\n          <h1>SOUND <span className=\"highlight\">TRACK</span></h1>\n          <div className=\"App\">\n            <SearchBar onSearch={this.openAiSearch}/>\n            <div className=\"App-playlist\">\n              <SearchResults searchResults={this.state.searchResults}\n                             onAdd={this.addTrack} />\n              <Playlist playlistName={this.state.playlistName}\n                        playlistTracks={this.state.playlistTracks}\n                        onNameChange={this.updatePlaylistName}\n                        onRemove={this.removeTrack}\n                        onSave={this.savePlaylist} />\n            </div>\n          </div>\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}