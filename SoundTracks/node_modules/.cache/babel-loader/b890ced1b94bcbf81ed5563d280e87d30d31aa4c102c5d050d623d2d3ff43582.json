{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldSet from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _classPrivateFieldGet from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _regeneratorRuntime from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _wrapAsyncGenerator from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nvar _parts, _type, _size, _endings;\nvar _Symbol$toStringTag, _Symbol$hasInstance;\n/*! fetch-blob. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs';\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nvar POOL_SIZE = 65536;\n\n/** @param {(Blob | Uint8Array)[]} parts */\nfunction toIterator(_x) {\n  return _toIterator.apply(this, arguments);\n}\nfunction _toIterator() {\n  _toIterator = _wrapAsyncGenerator(function (parts) {\n    var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _iterator3, _step3, part, position, end, size, chunk, _position, b, _chunk, buffer;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _iterator3 = _createForOfIteratorHelper(parts);\n            _context.prev = 1;\n            _iterator3.s();\n          case 3:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 40;\n              break;\n            }\n            part = _step3.value;\n            if (!('stream' in part)) {\n              _context.next = 9;\n              break;\n            }\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator( /** @type {AsyncIterableIterator<Uint8Array>} */part.stream()), _awaitAsyncGenerator), \"t0\", 7);\n          case 7:\n            _context.next = 38;\n            break;\n          case 9:\n            if (!ArrayBuffer.isView(part)) {\n              _context.next = 27;\n              break;\n            }\n            if (!clone) {\n              _context.next = 23;\n              break;\n            }\n            position = part.byteOffset;\n            end = part.byteOffset + part.byteLength;\n          case 13:\n            if (!(position !== end)) {\n              _context.next = 21;\n              break;\n            }\n            size = Math.min(end - position, POOL_SIZE);\n            chunk = part.buffer.slice(position, position + size);\n            position += chunk.byteLength;\n            _context.next = 19;\n            return new Uint8Array(chunk);\n          case 19:\n            _context.next = 13;\n            break;\n          case 21:\n            _context.next = 25;\n            break;\n          case 23:\n            _context.next = 25;\n            return part;\n          case 25:\n            _context.next = 38;\n            break;\n          case 27:\n            // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n            _position = 0, b = /** @type {Blob} */part;\n          case 28:\n            if (!(_position !== b.size)) {\n              _context.next = 38;\n              break;\n            }\n            _chunk = b.slice(_position, Math.min(b.size, _position + POOL_SIZE));\n            _context.next = 32;\n            return _awaitAsyncGenerator(_chunk.arrayBuffer());\n          case 32:\n            buffer = _context.sent;\n            _position += buffer.byteLength;\n            _context.next = 36;\n            return new Uint8Array(buffer);\n          case 36:\n            _context.next = 28;\n            break;\n          case 38:\n            _context.next = 3;\n            break;\n          case 40:\n            _context.next = 45;\n            break;\n          case 42:\n            _context.prev = 42;\n            _context.t1 = _context[\"catch\"](1);\n            _iterator3.e(_context.t1);\n          case 45:\n            _context.prev = 45;\n            _iterator3.f();\n            return _context.finish(45);\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 42, 45, 48]]);\n    })();\n  });\n  return _toIterator.apply(this, arguments);\n}\nvar _Blob = (_parts = /*#__PURE__*/new WeakMap(), _type = /*#__PURE__*/new WeakMap(), _size = /*#__PURE__*/new WeakMap(), _endings = /*#__PURE__*/new WeakMap(), _Symbol$toStringTag = Symbol.toStringTag, _Symbol$hasInstance = Symbol.hasInstance, /*#__PURE__*/function () {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  function Blob() {\n    var blobParts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Blob);\n    _classPrivateFieldInitSpec(this, _parts, {\n      writable: true,\n      value: []\n    });\n    _classPrivateFieldInitSpec(this, _type, {\n      writable: true,\n      value: ''\n    });\n    _classPrivateFieldInitSpec(this, _size, {\n      writable: true,\n      value: 0\n    });\n    _classPrivateFieldInitSpec(this, _endings, {\n      writable: true,\n      value: 'transparent'\n    });\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.');\n    }\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.');\n    }\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.');\n    }\n    if (options === null) options = {};\n    var encoder = new TextEncoder();\n    var _iterator4 = _createForOfIteratorHelper(blobParts),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var element = _step4.value;\n        var part = void 0;\n        if (ArrayBuffer.isView(element)) {\n          part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n        } else if (element instanceof ArrayBuffer) {\n          part = new Uint8Array(element.slice(0));\n        } else if (element instanceof Blob) {\n          part = element;\n        } else {\n          part = encoder.encode(\"\".concat(element));\n        }\n        _classPrivateFieldSet(this, _size, _classPrivateFieldGet(this, _size) + (ArrayBuffer.isView(part) ? part.byteLength : part.size));\n        _classPrivateFieldGet(this, _parts).push(part);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    _classPrivateFieldSet(this, _endings, \"\".concat(options.endings === undefined ? 'transparent' : options.endings));\n    var type = options.type === undefined ? '' : String(options.type);\n    _classPrivateFieldSet(this, _type, /^[\\x20-\\x7E]*$/.test(type) ? type : '');\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  _createClass(Blob, [{\n    key: \"size\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _size);\n    }\n\n    /**\n     * The type property of a Blob object returns the MIME type of the file.\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _type);\n    }\n\n    /**\n     * The text() method in the Blob interface returns a Promise\n     * that resolves with a string containing the contents of\n     * the blob, interpreted as UTF-8.\n     *\n     * @return {Promise<string>}\n     */\n  }, {\n    key: \"text\",\n    value: function () {\n      var _text = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var decoder, str, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, part;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // More optimized than using this.arrayBuffer()\n              // that requires twice as much ram\n              decoder = new TextDecoder();\n              str = '';\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context2.prev = 4;\n              _iterator = _asyncIterator(toIterator(_classPrivateFieldGet(this, _parts), false));\n            case 6:\n              _context2.next = 8;\n              return _iterator.next();\n            case 8:\n              if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                _context2.next = 14;\n                break;\n              }\n              part = _step.value;\n              str += decoder.decode(part, {\n                stream: true\n              });\n            case 11:\n              _iteratorAbruptCompletion = false;\n              _context2.next = 6;\n              break;\n            case 14:\n              _context2.next = 20;\n              break;\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](4);\n              _didIteratorError = true;\n              _iteratorError = _context2.t0;\n            case 20:\n              _context2.prev = 20;\n              _context2.prev = 21;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context2.next = 25;\n                break;\n              }\n              _context2.next = 25;\n              return _iterator.return();\n            case 25:\n              _context2.prev = 25;\n              if (!_didIteratorError) {\n                _context2.next = 28;\n                break;\n              }\n              throw _iteratorError;\n            case 28:\n              return _context2.finish(25);\n            case 29:\n              return _context2.finish(20);\n            case 30:\n              // Remaining\n              str += decoder.decode();\n              return _context2.abrupt(\"return\", str);\n            case 32:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[4, 16, 20, 30], [21,, 25, 29]]);\n      }));\n      function text() {\n        return _text.apply(this, arguments);\n      }\n      return text;\n    }()\n    /**\n     * The arrayBuffer() method in the Blob interface returns a\n     * Promise that resolves with the contents of the blob as\n     * binary data contained in an ArrayBuffer.\n     *\n     * @return {Promise<ArrayBuffer>}\n     */\n  }, {\n    key: \"arrayBuffer\",\n    value: function () {\n      var _arrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var data, offset, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, chunk;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // Easier way... Just a unnecessary overhead\n              // const view = new Uint8Array(this.size);\n              // await this.stream().getReader({mode: 'byob'}).read(view);\n              // return view.buffer;\n              data = new Uint8Array(this.size);\n              offset = 0;\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context3.prev = 4;\n              _iterator2 = _asyncIterator(toIterator(_classPrivateFieldGet(this, _parts), false));\n            case 6:\n              _context3.next = 8;\n              return _iterator2.next();\n            case 8:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context3.sent).done)) {\n                _context3.next = 15;\n                break;\n              }\n              chunk = _step2.value;\n              data.set(chunk, offset);\n              offset += chunk.length;\n            case 12:\n              _iteratorAbruptCompletion2 = false;\n              _context3.next = 6;\n              break;\n            case 15:\n              _context3.next = 21;\n              break;\n            case 17:\n              _context3.prev = 17;\n              _context3.t0 = _context3[\"catch\"](4);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context3.t0;\n            case 21:\n              _context3.prev = 21;\n              _context3.prev = 22;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context3.next = 26;\n                break;\n              }\n              _context3.next = 26;\n              return _iterator2.return();\n            case 26:\n              _context3.prev = 26;\n              if (!_didIteratorError2) {\n                _context3.next = 29;\n                break;\n              }\n              throw _iteratorError2;\n            case 29:\n              return _context3.finish(26);\n            case 30:\n              return _context3.finish(21);\n            case 31:\n              return _context3.abrupt(\"return\", data.buffer);\n            case 32:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 17, 21, 31], [22,, 26, 30]]);\n      }));\n      function arrayBuffer() {\n        return _arrayBuffer.apply(this, arguments);\n      }\n      return arrayBuffer;\n    }()\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var it = toIterator(_classPrivateFieldGet(this, _parts), true);\n      return new globalThis.ReadableStream({\n        // @ts-ignore\n        type: 'bytes',\n        pull: function pull(ctrl) {\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n            var chunk;\n            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n              while (1) switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return it.next();\n                case 2:\n                  chunk = _context4.sent;\n                  chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n                case 4:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }, _callee4);\n          }))();\n        },\n        cancel: function cancel() {\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return it.return();\n                case 2:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          }))();\n        }\n      });\n    }\n\n    /**\n     * The Blob interface's slice() method creates and returns a\n     * new Blob object which contains data from a subset of the\n     * blob on which it's called.\n     *\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {string} [type]\n     */\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size;\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var size = this.size;\n      var relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n      var relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n      var span = Math.max(relativeEnd - relativeStart, 0);\n      var parts = _classPrivateFieldGet(this, _parts);\n      var blobParts = [];\n      var added = 0;\n      var _iterator5 = _createForOfIteratorHelper(parts),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var part = _step5.value;\n          // don't add the overflow to new blobParts\n          if (added >= span) {\n            break;\n          }\n          var _size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n          if (relativeStart && _size2 <= relativeStart) {\n            // Skip the beginning and change the relative\n            // start & end position as we skip the unwanted parts\n            relativeStart -= _size2;\n            relativeEnd -= _size2;\n          } else {\n            var chunk = void 0;\n            if (ArrayBuffer.isView(part)) {\n              chunk = part.subarray(relativeStart, Math.min(_size2, relativeEnd));\n              added += chunk.byteLength;\n            } else {\n              chunk = part.slice(relativeStart, Math.min(_size2, relativeEnd));\n              added += chunk.size;\n            }\n            relativeEnd -= _size2;\n            blobParts.push(chunk);\n            relativeStart = 0; // All next sequential parts should start at 0\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      var blob = new Blob([], {\n        type: String(type).toLowerCase()\n      });\n      _classPrivateFieldSet(blob, _size, span);\n      _classPrivateFieldSet(blob, _parts, blobParts);\n      return blob;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Blob';\n    }\n  }], [{\n    key: _Symbol$hasInstance,\n    value: function value(object) {\n      return object && typeof object === 'object' && typeof object.constructor === 'function' && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n    }\n  }]);\n  return Blob;\n}());\nObject.defineProperties(_Blob.prototype, {\n  size: {\n    enumerable: true\n  },\n  type: {\n    enumerable: true\n  },\n  slice: {\n    enumerable: true\n  }\n});\n\n/** @type {typeof globalThis.Blob} */\nexport var Blob = _Blob;\nexport default Blob;","map":{"version":3,"names":["POOL_SIZE","toIterator","_x","_toIterator","apply","arguments","_wrapAsyncGenerator","parts","clone","length","undefined","_regeneratorRuntime","mark","_callee","_iterator3","_step3","part","position","end","size","chunk","_position","b","_chunk","buffer","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","value","delegateYield","_asyncGeneratorDelegate","_asyncIterator","stream","_awaitAsyncGenerator","ArrayBuffer","isView","byteOffset","byteLength","Math","min","slice","Uint8Array","arrayBuffer","sent","t1","e","f","finish","stop","_Blob","_parts","WeakMap","_type","_size","_endings","_Symbol$toStringTag","Symbol","toStringTag","_Symbol$hasInstance","hasInstance","Blob","blobParts","options","_classCallCheck","_classPrivateFieldInitSpec","writable","TypeError","iterator","encoder","TextEncoder","_iterator4","_step4","element","encode","concat","_classPrivateFieldSet","_classPrivateFieldGet","push","err","endings","type","String","test","_createClass","key","get","_text","_asyncToGenerator","_callee2","decoder","str","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_callee2$","_context2","TextDecoder","decode","t0","return","abrupt","text","_arrayBuffer","_callee3","data","offset","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_callee3$","_context3","set","it","globalThis","ReadableStream","pull","ctrl","_callee4","_callee4$","_context4","close","enqueue","cancel","_callee5","_callee5$","_context5","start","relativeStart","max","relativeEnd","span","added","_iterator5","_step5","subarray","blob","toLowerCase","object","constructor","Object","defineProperties","prototype","enumerable"],"sources":["C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/fetch-blob/index.js"],"sourcesContent":["/*! fetch-blob. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs'\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\n/** @param {(Blob | Uint8Array)[]} parts */\nasync function * toIterator (parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset\n        const end = part.byteOffset + part.byteLength\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE)\n          const chunk = part.buffer.slice(position, position + size)\n          position += chunk.byteLength\n          yield new Uint8Array(chunk)\n        }\n      } else {\n        yield part\n      }\n    /* c8 ignore next 10 */\n    } else {\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0, b = (/** @type {Blob} */ (part))\n      while (position !== b.size) {\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))\n        const buffer = await chunk.arrayBuffer()\n        position += buffer.byteLength\n        yield new Uint8Array(buffer)\n      }\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = []\n  #type = ''\n  #size = 0\n  #endings = 'transparent'\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  constructor (blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\n    }\n\n    if (options === null) options = {}\n\n    const encoder = new TextEncoder()\n    for (const element of blobParts) {\n      let part\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0))\n      } else if (element instanceof Blob) {\n        part = element\n      } else {\n        part = encoder.encode(`${element}`)\n      }\n\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size\n      this.#parts.push(part)\n    }\n\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`\n    const type = options.type === undefined ? '' : String(options.type)\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : ''\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size () {\n    return this.#size\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type () {\n    return this.#type\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text () {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder()\n    let str = ''\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, { stream: true })\n    }\n    // Remaining\n    str += decoder.decode()\n    return str\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer () {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size)\n    let offset = 0\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset)\n      offset += chunk.length\n    }\n\n    return data.buffer\n  }\n\n  stream () {\n    const it = toIterator(this.#parts, true)\n\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n      async pull (ctrl) {\n        const chunk = await it.next()\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)\n      },\n\n      async cancel () {\n        await it.return()\n      }\n    })\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice (start = 0, end = this.size, type = '') {\n    const { size } = this\n\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)\n\n    const span = Math.max(relativeEnd - relativeStart, 0)\n    const parts = this.#parts\n    const blobParts = []\n    let added = 0\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size\n        relativeEnd -= size\n      } else {\n        let chunk\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.byteLength\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.size\n        }\n        relativeEnd -= size\n        blobParts.push(chunk)\n        relativeStart = 0 // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], { type: String(type).toLowerCase() })\n    blob.#size = span\n    blob.#parts = blobParts\n\n    return blob\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return (\n      object &&\n      typeof object === 'object' &&\n      typeof object.constructor === 'function' &&\n      (\n        typeof object.stream === 'function' ||\n        typeof object.arrayBuffer === 'function'\n      ) &&\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\n    )\n  }\n}\n\nObject.defineProperties(_Blob.prototype, {\n  size: { enumerable: true },\n  type: { enumerable: true },\n  slice: { enumerable: true }\n})\n\n/** @type {typeof globalThis.Blob} */\nexport const Blob = _Blob\nexport default Blob\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}