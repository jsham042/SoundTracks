{"ast":null,"code":"var clientId = 'eccaa8f5ff264e5fa50317fe0514fb19'; // client ID  that Joe got from registering the app\nvar redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n// const redirectUri = 'https://www.soundtracksai.com/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nvar accessToken;\nvar Spotify = {\n  getAccessToken: function getAccessToken(callback) {\n    if (accessToken) {\n      callback(accessToken);\n      return;\n    }\n    var accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    var expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      var expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      callback(accessToken);\n    } else {\n      var accessUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = accessUrl;\n    }\n  },\n  search: function search(term) {\n    var accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n          preview_url: track.preview_url\n        };\n      });\n    });\n  },\n  openAiSearch: function openAiSearch(term) {\n    Spotify.getAccessToken(function (accessToken) {\n      return fetch(\"https://api.spotify.com/v1/search?q=\".concat(term, \"&type=track&limit=1\"), {\n        headers: {\n          Authorization: \"Bearer \".concat(accessToken)\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonResponse) {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(function (track) {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri,\n            preview_url: track.preview_url\n          };\n        });\n      });\n    });\n  },\n  // openAiSearch(term) {\n  //   const accessToken = Spotify.getAccessToken();\n  //   return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track&limit=1`, {\n  //     headers: {\n  //       Authorization: `Bearer ${accessToken}`\n  //     }\n  //   }).then(response => {\n  //     return response.json();\n  //   }).then(jsonResponse => {\n  //     if (!jsonResponse.tracks) {\n  //       return [];\n  //     }\n  //     return jsonResponse.tracks.items.map(track => ({\n  //       id: track.id,\n  //       name: track.name,\n  //       artist: track.artists[0].name,\n  //       album: track.album.name,\n  //       uri: track.uri,\n  //       preview_url: track.preview_url\n  //     }));\n  //   });\n  // },\n  makeRecommendation: function makeRecommendation(genre) {\n    var accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/recommendations?limit=100&market=us&seed_genres=\".concat(genre, \"&min_danceability=50\\\"\"),\n    //will fill in with danceability values later\n    {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n          preview_url: track.preview_url\n        };\n      });\n    });\n  },\n  savePlaylist: function savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    var accessToken = Spotify.getAccessToken();\n    var headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    var userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      userId = jsonResponse.id;\n      return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonResponse) {\n        var playlistId = jsonResponse.id;\n        return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","callback","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","preview_url","openAiSearch","makeRecommendation","genre","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["C:/Users/joesh/OneDrive/Desktop/SoundTracks/SoundTracks/src/util/Spotify.js"],"sourcesContent":["const clientId = 'eccaa8f5ff264e5fa50317fe0514fb19'; // client ID  that Joe got from registering the app\nconst redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n// const redirectUri = 'https://www.soundtracksai.com/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken;\n\n\nconst Spotify = {\n  getAccessToken(callback) {\n    if (accessToken) {\n      callback(accessToken);\n      return;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      callback(accessToken);\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri,\n        preview_url: track.preview_url\n      }));\n    });\n  },\n\n  openAiSearch(term) {\n    Spotify.getAccessToken(function(accessToken) {\n      return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track&limit=1`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).then(response => {\n        return response.json();\n      }).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n          preview_url: track.preview_url\n        }));\n      });\n    });\n  },\n\n\n\n  // openAiSearch(term) {\n  //   const accessToken = Spotify.getAccessToken();\n  //   return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track&limit=1`, {\n  //     headers: {\n  //       Authorization: `Bearer ${accessToken}`\n  //     }\n  //   }).then(response => {\n  //     return response.json();\n  //   }).then(jsonResponse => {\n  //     if (!jsonResponse.tracks) {\n  //       return [];\n  //     }\n  //     return jsonResponse.tracks.items.map(track => ({\n  //       id: track.id,\n  //       name: track.name,\n  //       artist: track.artists[0].name,\n  //       album: track.album.name,\n  //       uri: track.uri,\n  //       preview_url: track.preview_url\n  //     }));\n  //   });\n  // },\n\n  makeRecommendation(genre) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/recommendations?limit=100&market=us&seed_genres=${genre}&min_danceability=50\"`,//will fill in with danceability values later\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri,\n        preview_url: track.preview_url\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}