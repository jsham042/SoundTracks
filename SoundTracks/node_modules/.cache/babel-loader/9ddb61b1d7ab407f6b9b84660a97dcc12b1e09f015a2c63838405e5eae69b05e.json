{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import fetch from \"node-fetch\";\nimport axios from \"axios\";\n\n// Information to reach API\n\n//Asynchronous functions\nexport var generateText = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(prompt) {\n    var API_URL, api_key, data, response, jsonResponse;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          API_URL = \"https://api.openai.com/v1/engines/text-davinci-003/completions\";\n          api_key = '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';\n          data = JSON.stringify({\n            prompt: prompt,\n            temperature: 0.5,\n            max_tokens: 500,\n            top_p: 1,\n            frequency_penalty: 0,\n            presence_penalty: 0\n          });\n          _context.prev = 3;\n          _context.next = 6;\n          return axios.post(API_URL, data, {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": \"Bearer \".concat(api_key)\n            }\n          });\n        case 6:\n          response = _context.sent;\n          if (response.status === 200) {\n            jsonResponse = response.data; // Process the response data\n          } else {\n            console.log(\"Request failed with status code \".concat(response.status));\n          }\n          _context.next = 13;\n          break;\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](3);\n          console.error(_context.t0);\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 10]]);\n  }));\n  return function generateText(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Usage example:\ngenerateText(\"Give me 20 song recommendations for this prompt: driving down the 101 with the top down. Format the response with this convention Song Name - Artist Name 2. Song Name - Artist Name`\").then(function (response) {\n  console.log(response);\n}).catch(function (error) {\n  console.error(error);\n});\nexport default {\n  generateText: generateText\n};","map":{"version":3,"names":["axios","generateText","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","prompt","API_URL","api_key","data","response","jsonResponse","wrap","_callee$","_context","prev","next","JSON","stringify","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","post","headers","concat","sent","status","console","log","t0","error","stop","_x","apply","arguments","then","catch"],"sources":["C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/src/util/OpenAiAPIRequest.js"],"sourcesContent":["// import fetch from \"node-fetch\";\r\nimport axios from \"axios\";\r\n\r\n// Information to reach API\r\n\r\n//Asynchronous functions\r\nexport const generateText = async(prompt) => {\r\n    const API_URL = \"https://api.openai.com/v1/engines/text-davinci-003/completions\";\r\n    const api_key = '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';\r\n\r\n    const data = JSON.stringify({\r\n      prompt: prompt,\r\n      temperature: 0.5,\r\n      max_tokens: 500,\r\n      top_p: 1,\r\n      frequency_penalty: 0,\r\n      presence_penalty: 0\r\n    });\r\n\r\n    try {\r\n        const response = await axios.post(API_URL, data, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${api_key}`\r\n            }\r\n        });\r\n\r\n        if (response.status === 200) {\r\n            const jsonResponse = response.data;\r\n            // Process the response data\r\n        } else {\r\n            console.log(`Request failed with status code ${response.status}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// Usage example:\r\ngenerateText(\"Give me 20 song recommendations for this prompt: driving down the 101 with the top down. Format the response with this convention Song Name - Artist Name 2. Song Name - Artist Name`\").then((response) => {\r\n  console.log(response);\r\n}).catch((error) => {\r\n  console.error(error);\r\n});\r\n\r\nexport default {generateText};\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAEA;AACA,OAAO,IAAMC,YAAY;EAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAMC,MAAM;IAAA,IAAAC,OAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,QAAA,EAAAC,YAAA;IAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAC9BT,OAAO,GAAG,gEAAgE;UAC1EC,OAAO,GAAG,qDAAqD;UAE/DC,IAAI,GAAGQ,IAAI,CAACC,SAAS,CAAC;YAC1BZ,MAAM,EAAEA,MAAM;YACda,WAAW,EAAE,GAAG;YAChBC,UAAU,EAAE,GAAG;YACfC,KAAK,EAAE,CAAC;YACRC,iBAAiB,EAAE,CAAC;YACpBC,gBAAgB,EAAE;UACpB,CAAC,CAAC;UAAAT,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAE,IAAA;UAAA,OAGyBjB,KAAK,CAACyB,IAAI,CAACjB,OAAO,EAAEE,IAAI,EAAE;YAC7CgB,OAAO,EAAE;cACL,cAAc,EAAE,kBAAkB;cAClC,eAAe,YAAAC,MAAA,CAAYlB,OAAO;YACtC;UACJ,CAAC,CAAC;QAAA;UALIE,QAAQ,GAAAI,QAAA,CAAAa,IAAA;UAOd,IAAIjB,QAAQ,CAACkB,MAAM,KAAK,GAAG,EAAE;YACnBjB,YAAY,GAAGD,QAAQ,CAACD,IAAI,EAClC;UACJ,CAAC,MAAM;YACHoB,OAAO,CAACC,GAAG,oCAAAJ,MAAA,CAAoChB,QAAQ,CAACkB,MAAM,EAAG;UACrE;UAACd,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAiB,EAAA,GAAAjB,QAAA;UAEDe,OAAO,CAACG,KAAK,CAAAlB,QAAA,CAAAiB,EAAA,CAAO;QAAC;QAAA;UAAA,OAAAjB,QAAA,CAAAmB,IAAA;MAAA;IAAA,GAAA5B,OAAA;EAAA,CAG5B;EAAA,gBA/BYL,YAAYA,CAAAkC,EAAA;IAAA,OAAAjC,IAAA,CAAAkC,KAAA,OAAAC,SAAA;EAAA;AAAA,GA+BxB;;AAID;AACApC,YAAY,CAAC,uLAAuL,CAAC,CAACqC,IAAI,CAAC,UAAC3B,QAAQ,EAAK;EACvNmB,OAAO,CAACC,GAAG,CAACpB,QAAQ,CAAC;AACvB,CAAC,CAAC,CAAC4B,KAAK,CAAC,UAACN,KAAK,EAAK;EAClBH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;AACtB,CAAC,CAAC;AAEF,eAAe;EAAChC,YAAY,EAAZA;AAAY,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}