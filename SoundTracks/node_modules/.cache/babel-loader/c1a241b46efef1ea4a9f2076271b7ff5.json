{"ast":null,"code":"var clientId = 'c3a859af5f674d61b9aaefe638761f1e'; // client ID  that Joe got from registering the app\n\nvar redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\n\nvar accessToken;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    var accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    var expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      var expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n\n      return accessToken;\n    } else {\n      var accessUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = accessUrl;\n    }\n  },\n  search: function search(term) {\n    var accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n  openAisearch: function openAisearch(term) {\n    var accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/search?type=track&limit=1&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n  makeRecommendation: function makeRecommendation(genre) {\n    var accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/recommendations?limit=100&market=us&seed_genres=\".concat(genre, \"&min_danceability=50\\\"\"), //will fill in with danceability values later\n    {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n  savePlaylist: function savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    var accessToken = Spotify.getAccessToken();\n    var headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    var userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      userId = jsonResponse.id;\n      return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonResponse) {\n        var playlistId = jsonResponse.id;\n        return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["C:\\Users\\joesh\\OneDrive\\Desktop\\jammming-project-solution\\jammming-project-solution\\src\\util\\Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","openAisearch","makeRecommendation","genre","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = 'c3a859af5f674d61b9aaefe638761f1e'; // client ID  that Joe got from registering the app\nconst redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken;\n\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  openAisearch(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&limit=1&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  makeRecommendation(genre) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/recommendations?limit=100&market=us&seed_genres=${genre}&min_danceability=50\"`,//will fill in with danceability values later\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}