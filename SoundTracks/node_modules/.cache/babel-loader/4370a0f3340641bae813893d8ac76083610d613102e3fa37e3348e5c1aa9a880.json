{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, { PassThrough, pipeline as pump } from 'node:stream';\nimport { Buffer } from 'node:buffer';\nimport dataUriToBuffer from 'data-uri-to-buffer';\nimport { writeToStream, clone } from './body.js';\nimport Response from './response.js';\nimport Headers, { fromRawHeaders } from './headers.js';\nimport Request, { getNodeRequestOptions } from './request.js';\nimport { FetchError } from './errors/fetch-error.js';\nimport { AbortError } from './errors/abort-error.js';\nimport { isRedirect } from './utils/is-redirect.js';\nimport { FormData } from 'formdata-polyfill/esm.min.js';\nimport { isDomainOrSubdomain, isSameProtocol } from './utils/is.js';\nimport { parseReferrerPolicyFromHeader } from './utils/referrer.js';\nimport { Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom } from 'fetch-blob/from.js';\nexport { FormData, Headers, Request, Response, FetchError, AbortError, isRedirect };\nexport { Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom };\nvar supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default function fetch(_x, _x2) {\n  return _fetch.apply(this, arguments);\n}\nfunction _fetch() {\n  _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, options_) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            // Build request object\n            var request = new Request(url, options_);\n            var _getNodeRequestOption = getNodeRequestOptions(request),\n              parsedURL = _getNodeRequestOption.parsedURL,\n              options = _getNodeRequestOption.options;\n            if (!supportedSchemas.has(parsedURL.protocol)) {\n              throw new TypeError(\"node-fetch cannot load \".concat(url, \". URL scheme \\\"\").concat(parsedURL.protocol.replace(/:$/, ''), \"\\\" is not supported.\"));\n            }\n            if (parsedURL.protocol === 'data:') {\n              var data = dataUriToBuffer(request.url);\n              var _response = new Response(data, {\n                headers: {\n                  'Content-Type': data.typeFull\n                }\n              });\n              resolve(_response);\n              return;\n            }\n\n            // Wrap http.request into fetch\n            var send = (parsedURL.protocol === 'https:' ? https : http).request;\n            var signal = request.signal;\n            var response = null;\n            var abort = function abort() {\n              var error = new AbortError('The operation was aborted.');\n              reject(error);\n              if (request.body && request.body instanceof Stream.Readable) {\n                request.body.destroy(error);\n              }\n              if (!response || !response.body) {\n                return;\n              }\n              response.body.emit('error', error);\n            };\n            if (signal && signal.aborted) {\n              abort();\n              return;\n            }\n            var abortAndFinalize = function abortAndFinalize() {\n              abort();\n              finalize();\n            };\n\n            // Send request\n            var request_ = send(parsedURL.toString(), options);\n            if (signal) {\n              signal.addEventListener('abort', abortAndFinalize);\n            }\n            var finalize = function finalize() {\n              request_.abort();\n              if (signal) {\n                signal.removeEventListener('abort', abortAndFinalize);\n              }\n            };\n            request_.on('error', function (error) {\n              reject(new FetchError(\"request to \".concat(request.url, \" failed, reason: \").concat(error.message), 'system', error));\n              finalize();\n            });\n            fixResponseChunkedTransferBadEnding(request_, function (error) {\n              if (response && response.body) {\n                response.body.destroy(error);\n              }\n            });\n\n            /* c8 ignore next 18 */\n            if (process.version < 'v14') {\n              // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n              // properly handle when the socket close/end events are out of order.\n              request_.on('socket', function (s) {\n                var endedWithEventsCount;\n                s.prependListener('end', function () {\n                  endedWithEventsCount = s._eventsCount;\n                });\n                s.prependListener('close', function (hadError) {\n                  // if end happened before close but the socket didn't emit an error, do it now\n                  if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n                    var error = new Error('Premature close');\n                    error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n                    response.body.emit('error', error);\n                  }\n                });\n              });\n            }\n            request_.on('response', function (response_) {\n              request_.setTimeout(0);\n              var headers = fromRawHeaders(response_.rawHeaders);\n\n              // HTTP fetch step 5\n              if (isRedirect(response_.statusCode)) {\n                // HTTP fetch step 5.2\n                var location = headers.get('Location');\n\n                // HTTP fetch step 5.3\n                var locationURL = null;\n                try {\n                  locationURL = location === null ? null : new URL(location, request.url);\n                } catch (_unused) {\n                  // error here can only be invalid URL in Location: header\n                  // do not throw when options.redirect == manual\n                  // let the user extract the errorneous redirect URL\n                  if (request.redirect !== 'manual') {\n                    reject(new FetchError(\"uri requested responds with an invalid redirect URL: \".concat(location), 'invalid-redirect'));\n                    finalize();\n                    return;\n                  }\n                }\n\n                // HTTP fetch step 5.5\n                switch (request.redirect) {\n                  case 'error':\n                    reject(new FetchError(\"uri requested responds with a redirect, redirect mode is set to error: \".concat(request.url), 'no-redirect'));\n                    finalize();\n                    return;\n                  case 'manual':\n                    // Nothing to do\n                    break;\n                  case 'follow':\n                    {\n                      // HTTP-redirect fetch step 2\n                      if (locationURL === null) {\n                        break;\n                      }\n\n                      // HTTP-redirect fetch step 5\n                      if (request.counter >= request.follow) {\n                        reject(new FetchError(\"maximum redirect reached at: \".concat(request.url), 'max-redirect'));\n                        finalize();\n                        return;\n                      }\n\n                      // HTTP-redirect fetch step 6 (counter increment)\n                      // Create a new Request object.\n                      var requestOptions = {\n                        headers: new Headers(request.headers),\n                        follow: request.follow,\n                        counter: request.counter + 1,\n                        agent: request.agent,\n                        compress: request.compress,\n                        method: request.method,\n                        body: clone(request),\n                        signal: request.signal,\n                        size: request.size,\n                        referrer: request.referrer,\n                        referrerPolicy: request.referrerPolicy\n                      };\n\n                      // when forwarding sensitive headers like \"Authorization\",\n                      // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n                      // headers will be ignored when following a redirect to a domain\n                      // that is not a subdomain match or exact match of the initial domain.\n                      // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n                      // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n                      // headers will also be ignored when following a redirect to a domain using\n                      // a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n                      // will not forward the sensitive headers\n                      if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n                        for (var _i = 0, _arr = ['authorization', 'www-authenticate', 'cookie', 'cookie2']; _i < _arr.length; _i++) {\n                          var name = _arr[_i];\n                          requestOptions.headers.delete(name);\n                        }\n                      }\n\n                      // HTTP-redirect fetch step 9\n                      if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n                        reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n                        finalize();\n                        return;\n                      }\n\n                      // HTTP-redirect fetch step 11\n                      if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST') {\n                        requestOptions.method = 'GET';\n                        requestOptions.body = undefined;\n                        requestOptions.headers.delete('content-length');\n                      }\n\n                      // HTTP-redirect fetch step 14\n                      var responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n                      if (responseReferrerPolicy) {\n                        requestOptions.referrerPolicy = responseReferrerPolicy;\n                      }\n\n                      // HTTP-redirect fetch step 15\n                      resolve(fetch(new Request(locationURL, requestOptions)));\n                      finalize();\n                      return;\n                    }\n                  default:\n                    return reject(new TypeError(\"Redirect option '\".concat(request.redirect, \"' is not a valid value of RequestRedirect\")));\n                }\n              }\n\n              // Prepare response\n              if (signal) {\n                response_.once('end', function () {\n                  signal.removeEventListener('abort', abortAndFinalize);\n                });\n              }\n              var body = pump(response_, new PassThrough(), function (error) {\n                if (error) {\n                  reject(error);\n                }\n              });\n              // see https://github.com/nodejs/node/pull/29376\n              /* c8 ignore next 3 */\n              if (process.version < 'v12.10') {\n                response_.on('aborted', abortAndFinalize);\n              }\n              var responseOptions = {\n                url: request.url,\n                status: response_.statusCode,\n                statusText: response_.statusMessage,\n                headers: headers,\n                size: request.size,\n                counter: request.counter,\n                highWaterMark: request.highWaterMark\n              };\n\n              // HTTP-network fetch step 12.1.1.3\n              var codings = headers.get('Content-Encoding');\n\n              // HTTP-network fetch step 12.1.1.4: handle content codings\n\n              // in following scenarios we ignore compression support\n              // 1. compression support is disabled\n              // 2. HEAD request\n              // 3. no Content-Encoding header\n              // 4. no content response (204)\n              // 5. content not modified response (304)\n              if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n              }\n\n              // For Node v6+\n              // Be less strict when decoding compressed responses, since sometimes\n              // servers send slightly invalid responses that are still accepted\n              // by common browsers.\n              // Always using Z_SYNC_FLUSH is what cURL does.\n              var zlibOptions = {\n                flush: zlib.Z_SYNC_FLUSH,\n                finishFlush: zlib.Z_SYNC_FLUSH\n              };\n\n              // For gzip\n              if (codings === 'gzip' || codings === 'x-gzip') {\n                body = pump(body, zlib.createGunzip(zlibOptions), function (error) {\n                  if (error) {\n                    reject(error);\n                  }\n                });\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n              }\n\n              // For deflate\n              if (codings === 'deflate' || codings === 'x-deflate') {\n                // Handle the infamous raw deflate response from old servers\n                // a hack for old IIS and Apache servers\n                var raw = pump(response_, new PassThrough(), function (error) {\n                  if (error) {\n                    reject(error);\n                  }\n                });\n                raw.once('data', function (chunk) {\n                  // See http://stackoverflow.com/questions/37519828\n                  if ((chunk[0] & 0x0F) === 0x08) {\n                    body = pump(body, zlib.createInflate(), function (error) {\n                      if (error) {\n                        reject(error);\n                      }\n                    });\n                  } else {\n                    body = pump(body, zlib.createInflateRaw(), function (error) {\n                      if (error) {\n                        reject(error);\n                      }\n                    });\n                  }\n                  response = new Response(body, responseOptions);\n                  resolve(response);\n                });\n                raw.once('end', function () {\n                  // Some old IIS servers return zero-length OK deflate responses, so\n                  // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n                  if (!response) {\n                    response = new Response(body, responseOptions);\n                    resolve(response);\n                  }\n                });\n                return;\n              }\n\n              // For br\n              if (codings === 'br') {\n                body = pump(body, zlib.createBrotliDecompress(), function (error) {\n                  if (error) {\n                    reject(error);\n                  }\n                });\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n              }\n\n              // Otherwise, use response as-is\n              response = new Response(body, responseOptions);\n              resolve(response);\n            });\n\n            // eslint-disable-next-line promise/prefer-await-to-then\n            writeToStream(request_, request).catch(reject);\n          }));\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _fetch.apply(this, arguments);\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n  var LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n  var isChunkedTransfer = false;\n  var properLastChunkReceived = false;\n  var previousChunk;\n  request.on('response', function (response) {\n    var headers = response.headers;\n    isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n  });\n  request.on('socket', function (socket) {\n    var onSocketClose = function onSocketClose() {\n      if (isChunkedTransfer && !properLastChunkReceived) {\n        var error = new Error('Premature close');\n        error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n        errorCallback(error);\n      }\n    };\n    var onData = function onData(buf) {\n      properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n      // Sometimes final 0-length chunk and end of message code are in separate packets\n      if (!properLastChunkReceived && previousChunk) {\n        properLastChunkReceived = Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n      }\n      previousChunk = buf;\n    };\n    socket.prependListener('close', onSocketClose);\n    socket.on('data', onData);\n    request.on('close', function () {\n      socket.removeListener('close', onSocketClose);\n      socket.removeListener('data', onData);\n    });\n  });\n}","map":{"version":3,"names":["http","https","zlib","Stream","PassThrough","pipeline","pump","Buffer","dataUriToBuffer","writeToStream","clone","Response","Headers","fromRawHeaders","Request","getNodeRequestOptions","FetchError","AbortError","isRedirect","FormData","isDomainOrSubdomain","isSameProtocol","parseReferrerPolicyFromHeader","Blob","File","fileFromSync","fileFrom","blobFromSync","blobFrom","supportedSchemas","Set","fetch","_x","_x2","_fetch","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","options_","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","reject","request","_getNodeRequestOption","parsedURL","options","has","protocol","TypeError","concat","replace","data","response","headers","typeFull","send","signal","abort","error","body","Readable","destroy","emit","aborted","abortAndFinalize","finalize","request_","toString","addEventListener","removeEventListener","on","message","fixResponseChunkedTransferBadEnding","process","version","s","endedWithEventsCount","prependListener","_eventsCount","hadError","Error","code","response_","setTimeout","rawHeaders","statusCode","location","get","locationURL","URL","_unused","redirect","counter","follow","requestOptions","agent","compress","method","size","referrer","referrerPolicy","_i","_arr","length","name","delete","undefined","responseReferrerPolicy","once","responseOptions","status","statusText","statusMessage","highWaterMark","codings","zlibOptions","flush","Z_SYNC_FLUSH","finishFlush","createGunzip","raw","chunk","createInflate","createInflateRaw","createBrotliDecompress","catch","stop","errorCallback","LAST_CHUNK","from","isChunkedTransfer","properLastChunkReceived","previousChunk","socket","onSocketClose","onData","buf","compare","slice","removeListener"],"sources":["C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/node-fetch/src/index.js"],"sourcesContent":["/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, {PassThrough, pipeline as pump} from 'node:stream';\nimport {Buffer} from 'node:buffer';\n\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream, clone} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\nimport {FormData} from 'formdata-polyfill/esm.min.js';\nimport {isDomainOrSubdomain, isSameProtocol} from './utils/is.js';\nimport {parseReferrerPolicyFromHeader} from './utils/referrer.js';\nimport {\n\tBlob,\n\tFile,\n\tfileFromSync,\n\tfileFrom,\n\tblobFromSync,\n\tblobFrom\n} from 'fetch-blob/from.js';\n\nexport {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};\nexport {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst {parsedURL, options} = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL.toString(), options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tif (response && response.body) {\n\t\t\t\tresponse.body.destroy(error);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\n\t\t\t\t} catch {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Nothing to do\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: clone(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n\t\t\t\t\t\t// will not forward the sensitive headers\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflate(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflateRaw(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.once('end', () => {\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\twriteToStream(request_, request).catch(reject);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = buf => {\n\t\t\tproperLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\t\tsocket.on('data', onData);\n\n\t\trequest.on('close', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t\tsocket.removeListener('data', onData);\n\t\t});\n\t});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}