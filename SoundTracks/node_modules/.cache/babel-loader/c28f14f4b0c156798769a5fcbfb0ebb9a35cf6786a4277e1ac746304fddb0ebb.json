{"ast":null,"code":"import _slicedToArray from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncIterator from \"C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, { PassThrough } from 'node:stream';\nimport { types, deprecate, promisify } from 'node:util';\nimport { Buffer } from 'node:buffer';\nimport Blob from 'fetch-blob';\nimport { FormData, formDataToBlob } from 'formdata-polyfill/esm.min.js';\nimport { FetchError } from './errors/fetch-error.js';\nimport { FetchBaseError } from './errors/base.js';\nimport { isBlob, isURLSearchParameters } from './utils/is.js';\nvar pipeline = promisify(Stream.pipeline);\nvar INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nvar Body = /*#__PURE__*/function () {\n  function Body(body) {\n    var _this = this;\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 0 : _ref$size;\n    _classCallCheck(this, Body);\n    var boundary = null;\n    if (body === null) {\n      // Body is undefined or null\n      body = null;\n    } else if (isURLSearchParameters(body)) {\n      // Body is a URLSearchParams\n      body = Buffer.from(body.toString());\n    } else if (isBlob(body)) {\n      // Body is blob\n    } else if (Buffer.isBuffer(body)) {\n      // Body is Buffer\n    } else if (types.isAnyArrayBuffer(body)) {\n      // Body is ArrayBuffer\n      body = Buffer.from(body);\n    } else if (ArrayBuffer.isView(body)) {\n      // Body is ArrayBufferView\n      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n    } else if (body instanceof Stream) {\n      // Body is stream\n    } else if (body instanceof FormData) {\n      // Body is FormData\n      body = formDataToBlob(body);\n      boundary = body.type.split('=')[1];\n    } else {\n      // None of the above\n      // coerce to string then buffer\n      body = Buffer.from(String(body));\n    }\n    var stream = body;\n    if (Buffer.isBuffer(body)) {\n      stream = Stream.Readable.from(body);\n    } else if (isBlob(body)) {\n      stream = Stream.Readable.from(body.stream());\n    }\n    this[INTERNALS] = {\n      body: body,\n      stream: stream,\n      boundary: boundary,\n      disturbed: false,\n      error: null\n    };\n    this.size = size;\n    if (body instanceof Stream) {\n      body.on('error', function (error_) {\n        var error = error_ instanceof FetchBaseError ? error_ : new FetchError(\"Invalid response body while trying to fetch \".concat(_this.url, \": \").concat(error_.message), 'system', error_);\n        _this[INTERNALS].error = error;\n      });\n    }\n  }\n  _createClass(Body, [{\n    key: \"body\",\n    get: function get() {\n      return this[INTERNALS].stream;\n    }\n  }, {\n    key: \"bodyUsed\",\n    get: function get() {\n      return this[INTERNALS].disturbed;\n    }\n\n    /**\n     * Decode response as ArrayBuffer\n     *\n     * @return  Promise\n     */\n  }, {\n    key: \"arrayBuffer\",\n    value: function () {\n      var _arrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$consumeBody, buffer, byteOffset, byteLength;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return consumeBody(this);\n            case 2:\n              _yield$consumeBody = _context.sent;\n              buffer = _yield$consumeBody.buffer;\n              byteOffset = _yield$consumeBody.byteOffset;\n              byteLength = _yield$consumeBody.byteLength;\n              return _context.abrupt(\"return\", buffer.slice(byteOffset, byteOffset + byteLength));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function arrayBuffer() {\n        return _arrayBuffer.apply(this, arguments);\n      }\n      return arrayBuffer;\n    }()\n  }, {\n    key: \"formData\",\n    value: function () {\n      var _formData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var ct, _formData2, parameters, _iterator2, _step2, _step2$value, name, value, _yield$import, toFormData;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              ct = this.headers.get('content-type');\n              if (!ct.startsWith('application/x-www-form-urlencoded')) {\n                _context2.next = 11;\n                break;\n              }\n              _formData2 = new FormData();\n              _context2.t0 = URLSearchParams;\n              _context2.next = 6;\n              return this.text();\n            case 6:\n              _context2.t1 = _context2.sent;\n              parameters = new _context2.t0(_context2.t1);\n              _iterator2 = _createForOfIteratorHelper(parameters);\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  _step2$value = _slicedToArray(_step2.value, 2), name = _step2$value[0], value = _step2$value[1];\n                  _formData2.append(name, value);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              return _context2.abrupt(\"return\", _formData2);\n            case 11:\n              _context2.next = 13;\n              return import('./utils/multipart-parser.js');\n            case 13:\n              _yield$import = _context2.sent;\n              toFormData = _yield$import.toFormData;\n              return _context2.abrupt(\"return\", toFormData(this.body, ct));\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function formData() {\n        return _formData.apply(this, arguments);\n      }\n      return formData;\n    }()\n    /**\n     * Return raw response as Blob\n     *\n     * @return Promise\n     */\n  }, {\n    key: \"blob\",\n    value: function () {\n      var _blob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var ct, buf;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              ct = this.headers && this.headers.get('content-type') || this[INTERNALS].body && this[INTERNALS].body.type || '';\n              _context3.next = 3;\n              return this.arrayBuffer();\n            case 3:\n              buf = _context3.sent;\n              return _context3.abrupt(\"return\", new Blob([buf], {\n                type: ct\n              }));\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function blob() {\n        return _blob.apply(this, arguments);\n      }\n      return blob;\n    }()\n    /**\n     * Decode response as json\n     *\n     * @return  Promise\n     */\n  }, {\n    key: \"json\",\n    value: function () {\n      var _json = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var text;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.text();\n            case 2:\n              text = _context4.sent;\n              return _context4.abrupt(\"return\", JSON.parse(text));\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function json() {\n        return _json.apply(this, arguments);\n      }\n      return json;\n    }()\n    /**\n     * Decode response as text\n     *\n     * @return  Promise\n     */\n  }, {\n    key: \"text\",\n    value: function () {\n      var _text = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var buffer;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return consumeBody(this);\n            case 2:\n              buffer = _context5.sent;\n              return _context5.abrupt(\"return\", new TextDecoder().decode(buffer));\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function text() {\n        return _text.apply(this, arguments);\n      }\n      return text;\n    }()\n    /**\n     * Decode response as buffer (non-spec api)\n     *\n     * @return  Promise\n     */\n  }, {\n    key: \"buffer\",\n    value: function buffer() {\n      return consumeBody(this);\n    }\n  }]);\n  return Body;\n}();\nexport { Body as default };\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n  body: {\n    enumerable: true\n  },\n  bodyUsed: {\n    enumerable: true\n  },\n  arrayBuffer: {\n    enumerable: true\n  },\n  blob: {\n    enumerable: true\n  },\n  json: {\n    enumerable: true\n  },\n  text: {\n    enumerable: true\n  },\n  data: {\n    get: deprecate(function () {}, 'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead', 'https://github.com/node-fetch/node-fetch/issues/1000 (response)')\n  }\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nfunction consumeBody(_x) {\n  return _consumeBody.apply(this, arguments);\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nfunction _consumeBody() {\n  _consumeBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(data) {\n    var body, accum, accumBytes, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, error, error_;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!data[INTERNALS].disturbed) {\n            _context7.next = 2;\n            break;\n          }\n          throw new TypeError(\"body used already for: \".concat(data.url));\n        case 2:\n          data[INTERNALS].disturbed = true;\n          if (!data[INTERNALS].error) {\n            _context7.next = 5;\n            break;\n          }\n          throw data[INTERNALS].error;\n        case 5:\n          body = data.body; // Body is null\n          if (!(body === null)) {\n            _context7.next = 8;\n            break;\n          }\n          return _context7.abrupt(\"return\", Buffer.alloc(0));\n        case 8:\n          if (body instanceof Stream) {\n            _context7.next = 10;\n            break;\n          }\n          return _context7.abrupt(\"return\", Buffer.alloc(0));\n        case 10:\n          // Body is stream\n          // get ready to actually consume the body\n          accum = [];\n          accumBytes = 0;\n          _context7.prev = 12;\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context7.prev = 15;\n          _iterator = _asyncIterator(body);\n        case 17:\n          _context7.next = 19;\n          return _iterator.next();\n        case 19:\n          if (!(_iteratorAbruptCompletion = !(_step = _context7.sent).done)) {\n            _context7.next = 30;\n            break;\n          }\n          chunk = _step.value;\n          if (!(data.size > 0 && accumBytes + chunk.length > data.size)) {\n            _context7.next = 25;\n            break;\n          }\n          error = new FetchError(\"content size at \".concat(data.url, \" over limit: \").concat(data.size), 'max-size');\n          body.destroy(error);\n          throw error;\n        case 25:\n          accumBytes += chunk.length;\n          accum.push(chunk);\n        case 27:\n          _iteratorAbruptCompletion = false;\n          _context7.next = 17;\n          break;\n        case 30:\n          _context7.next = 36;\n          break;\n        case 32:\n          _context7.prev = 32;\n          _context7.t0 = _context7[\"catch\"](15);\n          _didIteratorError = true;\n          _iteratorError = _context7.t0;\n        case 36:\n          _context7.prev = 36;\n          _context7.prev = 37;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context7.next = 41;\n            break;\n          }\n          _context7.next = 41;\n          return _iterator.return();\n        case 41:\n          _context7.prev = 41;\n          if (!_didIteratorError) {\n            _context7.next = 44;\n            break;\n          }\n          throw _iteratorError;\n        case 44:\n          return _context7.finish(41);\n        case 45:\n          return _context7.finish(36);\n        case 46:\n          _context7.next = 52;\n          break;\n        case 48:\n          _context7.prev = 48;\n          _context7.t1 = _context7[\"catch\"](12);\n          error_ = _context7.t1 instanceof FetchBaseError ? _context7.t1 : new FetchError(\"Invalid response body while trying to fetch \".concat(data.url, \": \").concat(_context7.t1.message), 'system', _context7.t1);\n          throw error_;\n        case 52:\n          if (!(body.readableEnded === true || body._readableState.ended === true)) {\n            _context7.next = 64;\n            break;\n          }\n          _context7.prev = 53;\n          if (!accum.every(function (c) {\n            return typeof c === 'string';\n          })) {\n            _context7.next = 56;\n            break;\n          }\n          return _context7.abrupt(\"return\", Buffer.from(accum.join('')));\n        case 56:\n          return _context7.abrupt(\"return\", Buffer.concat(accum, accumBytes));\n        case 59:\n          _context7.prev = 59;\n          _context7.t2 = _context7[\"catch\"](53);\n          throw new FetchError(\"Could not create Buffer from response body for \".concat(data.url, \": \").concat(_context7.t2.message), 'system', _context7.t2);\n        case 62:\n          _context7.next = 65;\n          break;\n        case 64:\n          throw new FetchError(\"Premature close of server response while trying to fetch \".concat(data.url));\n        case 65:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[12, 48], [15, 32, 36, 46], [37,, 41, 45], [53, 59]]);\n  }));\n  return _consumeBody.apply(this, arguments);\n}\nexport var clone = function clone(instance, highWaterMark) {\n  var p1;\n  var p2;\n  var body = instance[INTERNALS].body;\n\n  // Don't allow cloning a used body\n  if (instance.bodyUsed) {\n    throw new Error('cannot clone body after it is used');\n  }\n\n  // Check that body is a stream and not form-data object\n  // note: we can't clone the form-data object without having it as a dependency\n  if (body instanceof Stream && typeof body.getBoundary !== 'function') {\n    // Tee instance body\n    p1 = new PassThrough({\n      highWaterMark: highWaterMark\n    });\n    p2 = new PassThrough({\n      highWaterMark: highWaterMark\n    });\n    body.pipe(p1);\n    body.pipe(p2);\n    // Set instance body to teed body and return the other teed body\n    instance[INTERNALS].stream = p1;\n    body = p2;\n  }\n  return body;\n};\nvar getNonSpecFormDataBoundary = deprecate(function (body) {\n  return body.getBoundary();\n}, 'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package', 'https://github.com/node-fetch/node-fetch/issues/1167');\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport var extractContentType = function extractContentType(body, request) {\n  // Body is null or undefined\n  if (body === null) {\n    return null;\n  }\n\n  // Body is string\n  if (typeof body === 'string') {\n    return 'text/plain;charset=UTF-8';\n  }\n\n  // Body is a URLSearchParams\n  if (isURLSearchParameters(body)) {\n    return 'application/x-www-form-urlencoded;charset=UTF-8';\n  }\n\n  // Body is blob\n  if (isBlob(body)) {\n    return body.type || null;\n  }\n\n  // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n  if (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n    return null;\n  }\n  if (body instanceof FormData) {\n    return \"multipart/form-data; boundary=\".concat(request[INTERNALS].boundary);\n  }\n\n  // Detect form data input from form-data module\n  if (body && typeof body.getBoundary === 'function') {\n    return \"multipart/form-data;boundary=\".concat(getNonSpecFormDataBoundary(body));\n  }\n\n  // Body is stream - can't really do much about this\n  if (body instanceof Stream) {\n    return null;\n  }\n\n  // Body constructor defaults other things to string\n  return 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport var getTotalBytes = function getTotalBytes(request) {\n  var body = request[INTERNALS].body;\n\n  // Body is null or undefined\n  if (body === null) {\n    return 0;\n  }\n\n  // Body is Blob\n  if (isBlob(body)) {\n    return body.size;\n  }\n\n  // Body is Buffer\n  if (Buffer.isBuffer(body)) {\n    return body.length;\n  }\n\n  // Detect form data input from form-data module\n  if (body && typeof body.getLengthSync === 'function') {\n    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n  }\n\n  // Body is stream\n  return null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nexport var writeToStream = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(dest, _ref2) {\n    var body;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          body = _ref2.body;\n          if (!(body === null)) {\n            _context6.next = 5;\n            break;\n          }\n          // Body is null\n          dest.end();\n          _context6.next = 7;\n          break;\n        case 5:\n          _context6.next = 7;\n          return pipeline(body, dest);\n        case 7:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return function writeToStream(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Stream","PassThrough","types","deprecate","promisify","Buffer","Blob","FormData","formDataToBlob","FetchError","FetchBaseError","isBlob","isURLSearchParameters","pipeline","INTERNALS","Symbol","Body","body","_this","_ref","arguments","length","undefined","_ref$size","size","_classCallCheck","boundary","from","toString","isBuffer","isAnyArrayBuffer","ArrayBuffer","isView","buffer","byteOffset","byteLength","type","split","String","stream","Readable","disturbed","error","on","error_","concat","url","message","_createClass","key","get","value","_arrayBuffer","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$consumeBody","wrap","_callee$","_context","prev","next","consumeBody","sent","abrupt","slice","stop","arrayBuffer","apply","_formData","_callee2","ct","_formData2","parameters","_iterator2","_step2","_step2$value","name","_yield$import","toFormData","_callee2$","_context2","headers","startsWith","formData","t0","URLSearchParams","text","t1","_createForOfIteratorHelper","s","n","done","_slicedToArray","append","err","e","f","_blob","_callee3","buf","_callee3$","_context3","blob","_json","_callee4","_callee4$","_context4","JSON","parse","json","_text","_callee5","_callee5$","_context5","TextDecoder","decode","default","prototype","Object","defineProperties","enumerable","bodyUsed","data","_x","_consumeBody","_callee7","accum","accumBytes","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","_callee7$","_context7","TypeError","alloc","_asyncIterator","destroy","push","return","finish","readableEnded","_readableState","ended","every","c","join","t2","clone","instance","highWaterMark","p1","p2","Error","getBoundary","pipe","getNonSpecFormDataBoundary","extractContentType","request","getTotalBytes","getLengthSync","hasKnownLength","writeToStream","_ref3","_callee6","dest","_ref2","_callee6$","_context6","end","_x2","_x3"],"sources":["C:/Users/joesh/OneDrive/Desktop/jammming-project-solution/jammming-project-solution/node_modules/node-fetch/src/body.js"],"sourcesContent":["\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, {PassThrough} from 'node:stream';\nimport {types, deprecate, promisify} from 'node:util';\nimport {Buffer} from 'node:buffer';\n\nimport Blob from 'fetch-blob';\nimport {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n\nimport {FetchError} from './errors/fetch-error.js';\nimport {FetchBaseError} from './errors/base.js';\nimport {isBlob, isURLSearchParameters} from './utils/is.js';\n\nconst pipeline = promisify(Stream.pipeline);\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if (isURLSearchParameters(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = Buffer.from(body.toString());\n\t\t} else if (isBlob(body)) {\n\t\t\t// Body is blob\n\t\t} else if (Buffer.isBuffer(body)) {\n\t\t\t// Body is Buffer\n\t\t} else if (types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = Buffer.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof Stream) {\n\t\t\t// Body is stream\n\t\t} else if (body instanceof FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = formDataToBlob(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = Buffer.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (Buffer.isBuffer(body)) {\n\t\t\tstream = Stream.Readable.from(body);\n\t\t} else if (isBlob(body)) {\n\t\t\tstream = Stream.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof Stream) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await import('./utils/multipart-parser.js');\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\n\t\tconst buf = await this.arrayBuffer();\n\n\t\treturn new Blob([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst text = await this.text();\n\t\treturn JSON.parse(text);\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true},\n\tdata: {get: deprecate(() => {},\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS].disturbed = true;\n\n\tif (data[INTERNALS].error) {\n\t\tthrow data[INTERNALS].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof Stream)) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn Buffer.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn Buffer.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nexport const clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new PassThrough({highWaterMark});\n\t\tp2 = new PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = deprecate(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport const extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif (isURLSearchParameters(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif (isBlob(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof Stream) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport const getTotalBytes = request => {\n\tconst {body} = request[INTERNALS];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif (isBlob(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nexport const writeToStream = async (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tawait pipeline(body, dest);\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}